# === BIBLIOTECAS UTILIZADAS ===
from telegram import Bot
import asyncio
import openai
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import os
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from pymongo import MongoClient
from fpdf import FPDF
import tempfile
import unicodedata
from asyncio import run_coroutine_threadsafe
import time


# === CONFIGURA√á√ïES DE VARIAVEIS DE AMBIENTE ===
# Captura das vari√°veis de ambiente necess√°rias para o funcionamento do bot
TOKEN = os.getenv('TOKEN')                   # Token do bot Telegram
CHAT_ID = os.getenv('CHAT_ID')               # ID do chat onde as mensagens autom√°ticas ser√£o enviadas
openai.api_key = os.getenv('OPENAI_API_KEY') # Chave de API da OpenAI
MONGO_URI = os.getenv('MONGO_URI')           # URI de conex√£o com o MongoDB


# === CONEXAO COM BANCO DE DADOS ===
# Tenta se conectar ao banco MongoDB utilizando a URI fornecida.
# Caso ocorra erro, a cole√ß√£o ser√° definida como None para evitar falhas no c√≥digo.
try:
    client = MongoClient(MONGO_URI)
    db = client["frases_motivacionais"]       # Nome do banco de dados
    colecao = db["mensagens"]                 # Nome da cole√ß√£o usada para armazenar as frases
except Exception as e:
    print("Erro ao conectar ao MongoDB:", e)
    colecao = None


# === FUN√á√ÉO PARA SALVAR NO BANCO DE DADOS ===
def salvar_frase(frase, modelo):
    # Verifica se a conex√£o com o banco foi bem-sucedida
    if colecao is None:
        print("‚ö†Ô∏è Banco de dados indispon√≠vel, n√£o foi poss√≠vel salvar a frase.")
        return
    # Cria um documento com data/hora (ajustada para o fuso de Bras√≠lia),
    # o tipo de origem (Autom√°tico ou Bot√£o) e a frase gerada
    documento = {
        "data_hora": datetime.now() - timedelta(hours=3),  # Ajuste para UTC-3 - Devido Servidor Railway
        "modelo": modelo,                                  # "Autom√°tico" ou "Bot√£o"
        "frase": frase
    }
    # Insere o documento na cole√ß√£o do MongoDB
    colecao.insert_one(documento)
    print(f"üíæ Frase [{modelo}] salva no banco √†s {documento['data_hora'].strftime('%d/%m/%Y %H:%M')}: {frase}")


# === GERADOR DE FRASE COM CHATGPT  - IA ===
async def gerar_frase_motivacional():
    try:
         # Inicializa o cliente ass√≠ncrono da OpenAI com a chave da API
        client = openai.AsyncOpenAI(api_key=openai.api_key)
        
        # Envia uma requisi√ß√£o para o modelo GPT-3.5 com instru√ß√µes espec√≠ficas
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",                        # Modelo utilizado
            messages=[
                {"role": "system", "content": "Voc√™ √© um gerador de frases motivacionais curtas."},
                {"role": "user", "content": "Me envie uma frase motivacional simples, curta e positiva."}
            ],
            temperature=0.7,                              # Grau de criatividade - 0 - Direto 1 - Criatvo 
            max_tokens=60                                 # Limite de palavras/tamanho da resposta
        )
        # Extrai apenas o conte√∫do da resposta e remove espa√ßos extras
        frase = response.choices[0].message.content.strip()
        print("‚ú® Frase gerada com sucesso:", frase)
        return frase
        
    except Exception as e:
        # Em caso de erro na API, exibe mensagem e retorna uma frase padr√£o
        print("X Erro ao Gerar Frases: ", e)
        return "N√£o Desista de Tentar!"


# === RESPONDER COM O BOT√ÉO NO TELEGRAM ===
async def responder_com_botao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Define um teclado com dois bot√µes: um para gerar frase e outro para hist√≥rico
    teclado = [
        [InlineKeyboardButton("Seja Motivado!!!", callback_data="Motivar")],
        [InlineKeyboardButton("üìú Ver Hist√≥rico", callback_data="Historico")]
    ]

    # Cria a estrutura visual com os bot√µes
    reply_markup = InlineKeyboardMarkup(teclado)

    # Envia uma mensagem de resposta com os bot√µes para o usu√°rio
    await update.message.reply_text(
        "Seja Motivado!!! - Escolha uma op√ß√£o abaixo:",
        reply_markup=reply_markup
    )
    print("üì© Mensagem recebida - bot√µes exibidos ao usu√°rio.")


# === TRATAR O BOT√ÉO NO TELEGRAM ===
async def tratar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()     # Confirma para o Telegram que o clique foi processado

    # Se o bot√£o clicado for "Motivar", gera e envia uma nova frase
    if query.data == "Motivar":
        print("üîò Bot√£o [Motivar] clicado")
        frase = await gerar_frase_motivacional()       # Chama a fun√ß√£o da OpenAI
        await query.message.reply_text(frase)          # Responde com a frase gerada
        salvar_frase(frase, "Bot√£o")                   # Salva no banco com origem "Bot√£o"

    # Se o bot√£o clicado for "Hist√≥rico", gera um PDF com as √∫ltimas frases
    elif query.data == "Historico":
        print("üîò Bot√£o [Hist√≥rico] clicado")
        if colecao is not None:
            # Busca as 30 √∫ltimas frases ordenadas pela data mais recente
            frases = list(colecao.find().sort("data_hora", -1).limit(30))
            if not frases:
                await query.message.reply_text("Nenhuma frase encontrada no hist√≥rico.")
                return
            # Gera o PDF e envia como documento no chat
            caminho_pdf = gerar_pdf_frases(frases)
            await query.message.reply_document(document=open(caminho_pdf, "rb"))
            print("üìÑ PDF com hist√≥rico enviado com sucesso!")
        else:
            await query.message.reply_text("Erro: banco de dados n√£o est√° conectado.")
            print("‚ö†Ô∏è Erro: tentativa de acessar o hist√≥rico sem banco conectado.")


# === ENVIO DA MENSAGEM AGENDADA ===
async def enviar_mensagem():
    bot = Bot(token=TOKEN)      # Cria uma inst√¢ncia do bot com o token
    frase = await gerar_frase_motivacional()    # Gera uma nova frase via OpenAI
    await bot.send_message(chat_id=CHAT_ID, text=frase)   # Envia a frase ao chat especificado
    salvar_frase(frase, "Autom√°tico")    # Salva a frase no banco com o modelo "Autom√°tico"
    print("‚úÖ Frase enviada automaticamente:", frase)   # Confirma o envio nos logs


# === AGENDAR ENVIO DI√ÅRIO ===
async def agendar_envio_diario(application):
    scheduler = AsyncIOScheduler()    # Cria o agendador ass√≠ncrono

    # Recupera as vari√°veis de ambiente com hor√°rio e minuto do envio
    hour = int(os.getenv("SEND_HOUR", 8))      # Hor√°rio padr√£o: 8h
    minute = int(os.getenv("SEND_MINUTE", 0))  # Minuto padr√£o: 0

    # Obt√©m o loop de eventos atual para agendar a execu√ß√£o ass√≠ncrona
    loop = asyncio.get_event_loop()

    # Adiciona o job ao agendador com o hor√°rio definido
    scheduler.add_job(
        lambda: run_coroutine_threadsafe(enviar_mensagem(), loop), # Executa a fun√ß√£o enviar_mensagem() de forma segura no loop
        'cron',                                                    # Tipo de agendamento di√°rio com hora/minuto fixos
        hour=hour,
        minute=minute
    )
    scheduler.start() # Inicia o agendador
    print("üïó Envio di√°rio agendado para {:02d}:{:02d}!".format(hour, minute))  # Mostra no log o hor√°rio agendado


# === REMOVENDO EMOJI DO PDF ===
def remover_emojis(texto):
    # Remove caracteres gr√°ficos e emojis usando a categoria Unicode "So" (Symbol, Other)
    texto_sem_emojis = ''.join(
        c for c in texto
        if not unicodedata.category(c).startswith('So')
    )
    return texto_sem_emojis # Retorna o texto limpo sem emojis

# === GERAR PDF DO HISTORICO ===
def gerar_pdf_frases(frases):
    # Inicializa o PDF, adiciona uma p√°gina e define o cabe√ßalho com formata√ß√£o
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, txt="Hist√≥rico de Frases Motivacionais", ln=True, align="C")
    pdf.ln(8)
    pdf.set_font("Arial", size=11)

    for i, frase in enumerate(frases):
        # Trata o campo data_hora, aceitando tanto datetime quanto string
        data_raw = frase["data_hora"]
        if isinstance(data_raw, datetime):
            data_formatada = data_raw.strftime('%d/%m/%Y %H:%M')
        elif isinstance(data_raw, str):
            try:
                # Tenta formatar sem microsegundos primeiro
                data_formatada = datetime.fromisoformat(data_raw.split(".")[0]).strftime('%d/%m/%Y %H:%M')
            except:
                data_formatada = data_raw  # Caso falhe a convers√£o, exibe o original
        else:
            data_formatada = "Data inv√°lida"

        # Remove emojis da frase
        frase_limpa = remover_emojis(frase["frase"])
        
        # Monta a linha no formato: data - [modelo] frase
        linha = f"{data_formatada} - [{frase['modelo']}] {frase_limpa}"

        pdf.multi_cell(0, 10, linha)
        pdf.ln(3)

        # A cada 5 frases, insere uma linha separadora para facilitar a leitura
        if (i + 1) % 5 == 0:
            pdf.line(10, pdf.get_y(), 200, pdf.get_y())
            pdf.ln(3)

    # Cria um arquivo PDF tempor√°rio para envio
    temp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(temp.name)
    return temp.name # Retorna o caminho do arquivo gerado

# === FUN√á√ÉO PRINCIPAL ===
def main():
    time.sleep(20)      # Aguarda 20 segundos para evitar conflito durante o deploy (Railway)

    # Inicializa a aplica√ß√£o do bot com o token e agenda o envio autom√°tico
    application = Application.builder().token(TOKEN).post_init(agendar_envio_diario).build()

    # Adiciona o handler para responder a mensagens de texto (sem comandos)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, responder_com_botao))

    # Adiciona o handler para tratar os bot√µes clicados no Telegram
    application.add_handler(CallbackQueryHandler(tratar_callback))

    print("ü§ñ Bot rodando com polling + agendamento")

    # Inicia o polling (escuta cont√≠nua por mensagens e intera√ß√µes)
    application.run_polling()

# === EXECU√á√ÉO ===
# Verifica se este arquivo est√° sendo executado diretamente
# Se sim, chama a fun√ß√£o principal para iniciar o bot
if __name__ == "__main__":
    main()
